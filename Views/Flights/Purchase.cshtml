@model Purchase
@{
    ViewData["Title"] = "Purchase";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.13.1/jquery.validate.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery.payment/1.2.3/jquery.payment.min.js"></script>

<style>
    .ticket-info {
        background-color: rgba(245,245,245,0.6);
    }

.column-left {
  width: 50%;
  float: left; 
}
</style>

<div class="row">
    <h2>Payment Information</h2>
</div>
<br /><br />
<div class="row">
    
    <div class="column-left">
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <span class="form-label">Name Surname</span>
                    @Html.TextBox("Name", @ViewData["Name"], new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <span class="form-label">Email</span>
                    @Html.TextBox("Email", @ViewData["Email"], new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <span class="form-label">Card Number</span>
                    @Html.DropDownList("CreditCard", ViewData["CardId"] as SelectList, "Last 4 digits.", new { required = "required", @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <span class="form-label">Billing Adress</span>
                    @Html.DropDownList("Adress", ViewData["Addresses"] as SelectList, "Address", new { required = "required", @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <input type="hidden" name="pId" value="@Model.Id" />
                <button class="subscribe btn btn-success btn-lg btn-block" type="button">Complete Purchase</button>
                <button class="subscribe btn btn-dark btn-lg btn-block" type="button">Cancel Puchase</button>
            </div>
        </div> 
    </div>
    <div class="column-left ticket-info">
        <div class="row">
            <h5 style="margin: 5%">Ticket information</h5>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <dl class="row" style="margin: 5%">
                        <dt class="col-sm-6">
                            No of Tickets:
                        </dt>
                        <dd class="col-sm-1">
                            @Model.Tickets.Count
                        </dd>
                        <dt class="col-sm-6">
                            Offers:
                        </dt>
                        <dd class="col-sm-6">
                            @ViewData["Offer"]
                        </dd>
                        <dt class="col-sm-6">
                            No of Infants
                        </dt>
                        <dd class="col-sm-6">
                            @ViewData["Baby"]
                        </dd>
                        <dt class="col-sm-6">
                            Seats Taken:
                        </dt>
                        @foreach (var item in Model.Tickets)
                        {
                            <dd class="col-sm-1">
                                @Html.Label(item.Seats.ToArray()[0].Col + item.Seats.ToArray()[0].Row)
                            </dd>
                        }
                        <dt class="col-sm-6">
                            Total Price:
                        </dt>
                        <dd class="col-sm-1">
                            @Model.Price
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

    </div>

</div>



    @*
        <div class="row">
            <!-- You can make it whatever width you want. I'm making it full width
                 on <= small devices and 4/12 page width on >= medium devices -->
            <div class="col-md-12 col-md-4">


                <!-- CREDIT CARD FORM STARTS HERE -->
                <div class="panel panel-default credit-card-box">
                    <div class="panel-heading display-table">
                        <div class="row display-tr">
                            <h3 class="panel-title display-td">Payment Details</h3>
                            <div class="display-td">
                                <img class="img-responsive pull-right" src="http://i76.imgup.net/accepted_c22e0.png">
                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="form-group">
                            <label>
                                @ViewData["Creditcards"]
                                @Html.DropDownList("CreditCard", ViewData["CardId"] as SelectList, "Last 4 digits.", new { required = "required" }) &nbsp;
                            </label>
                        </div>
                        <div class="form-group">
                            <a href="/Identity/Account/Manage/CreditCardCreate">Add new card</a>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-12">
                            <input type="hidden" name="pId" value="@Model.Id" />
                            <button class="subscribe btn btn-success btn-lg btn-block" type="button">Complete Purchase</button>
                            <button class="subscribe btn btn-dark btn-lg btn-block" type="button">Cancel Puchase</button>
                        </div>
                    </div>
                </div>
                <!-- CREDIT CARD FORM ENDS HERE -->


            </div>
        </div>

    *@

    @*
        <script type="text/javascript">
            var $form = $('#payment-form');
            $form.find('.subscribe').on('click', payWithStripe);

            /* If you're using Stripe for payments */
            function payWithStripe(e) {
                e.preventDefault();

                /* Abort if invalid form data */
                if (!validator.form()) {
                    return;
                }

                /* Visual feedback */
                $form.find('.subscribe').html('Validating <i class="fa fa-spinner fa-pulse"></i>').prop('disabled', true);

                var PublishableKey = 'pk_test_6pRNASCoBOKtIshFeQd4XMUh'; // Replace with your API publishable key
                Stripe.setPublishableKey(PublishableKey);

                /* Create token */
                var expiry = $form.find('[name=cardExpiry]').payment('cardExpiryVal');
                var ccData = {
                    number: $form.find('[name=cardNumber]').val().replace(/\s/g, ''),
                    cvc: $form.find('[name=cardCVC]').val(),
                    exp_month: expiry.month,
                    exp_year: expiry.year
                };

                Stripe.card.createToken(ccData, function stripeResponseHandler(status, response) {
                    if (response.error) {
                        /* Visual feedback */
                        $form.find('.subscribe').html('Try again').prop('disabled', false);
                        /* Show Stripe errors on the form */
                        $form.find('.payment-errors').text(response.error.message);
                        $form.find('.payment-errors').closest('.row').show();
                    } else {
                        /* Visual feedback */
                        $form.find('.subscribe').html('Processing <i class="fa fa-spinner fa-pulse"></i>');
                        /* Hide Stripe errors on the form */
                        $form.find('.payment-errors').closest('.row').hide();
                        $form.find('.payment-errors').text("");
                        // response contains id and card, which contains additional card details
                        console.log(response.id);
                        console.log(response.card);
                        var token = response.id;
                        // AJAX - you would send 'token' to your server here.
                        $.post('/account/stripe_card_token', {
                            token: token
                        })
                            // Assign handlers immediately after making the request,
                            .done(function (data, textStatus, jqXHR) {
                                $form.find('.subscribe').html('Payment successful <i class="fa fa-check"></i>');
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                $form.find('.subscribe').html('There was a problem').removeClass('success').addClass('error');
                                /* Show Stripe errors on the form */
                                $form.find('.payment-errors').text('Try refreshing the page and trying again.');
                                $form.find('.payment-errors').closest('.row').show();
                            });
                    }
                });
            }
            /* Fancy restrictive input formatting via jQuery.payment library*/
            $('input[name=cardNumber]').payment('formatCardNumber');
            $('input[name=cardCVC]').payment('formatCardCVC');
            $('input[name=cardExpiry').payment('formatCardExpiry');

            /* Form validation using Stripe client-side validation helpers */
            jQuery.validator.addMethod("cardNumber", function (value, element) {
                return this.optional(element) || Stripe.card.validateCardNumber(value);
            }, "Please specify a valid credit card number.");

            jQuery.validator.addMethod("cardExpiry", function (value, element) {
                /* Parsing month/year uses jQuery.payment library */
                value = $.payment.cardExpiryVal(value);
                return this.optional(element) || Stripe.card.validateExpiry(value.month, value.year);
            }, "Invalid expiration date.");

            jQuery.validator.addMethod("cardCVC", function (value, element) {
                return this.optional(element) || Stripe.card.validateCVC(value);
            }, "Invalid CVC.");

            validator = $form.validate({
                rules: {
                    cardNumber: {
                        required: true,
                        cardNumber: true
                    },
                    cardExpiry: {
                        required: true,
                        cardExpiry: true
                    },
                    cardCVC: {
                        required: true,
                        cardCVC: true
                    }
                },
                highlight: function (element) {
                    $(element).closest('.form-control').removeClass('success').addClass('error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('error').addClass('success');
                },
                errorPlacement: function (error, element) {
                    $(element).closest('.form-group').append(error);
                }
            });

            paymentFormReady = function () {
                if ($form.find('[name=cardNumber]').hasClass("success") &&
                    $form.find('[name=cardExpiry]').hasClass("success") &&
                    $form.find('[name=cardCVC]').val().length > 1) {
                    return true;
                } else {
                    return false;
                }
            }

            $form.find('.subscribe').prop('disabled', true);
            var readyInterval = setInterval(function () {
                if (paymentFormReady()) {
                    $form.find('.subscribe').prop('disabled', false);
                    clearInterval(readyInterval);
                }
            }, 250);
        </script>
    *@
